#fcfs
import java.util.ArrayList; 
import java.util.List; 
import java.util.Scanner; 
class T { 
String n; 
double et; 
double wt; 
T(String n, double et) { 
this.n = n; 
this.et = et; 
this.wt = 0; 
} 
} 
class V { 
    String n; 
    double et; 
 
    V(String n) { 
        this.n = n; 
        this.et = 0; 
    } 
} 
 
public class Scheduler { 
 
    public static void assignTasks(List<T> tasks, List<V> vms) { 
        int vmCount = vms.size(); 
 
        for (int i = 0; i < vmCount && i < tasks.size(); i++) { 
            tasks.get(i).wt = 0; 
            vms.get(i).et = tasks.get(i).et; 
        } 
 
        for (int i = vmCount; i < tasks.size(); i++) { 
            V vm = vms.get(i % vmCount); 
            T task = tasks.get(i); 
            task.wt = vm.et; 
            vm.et += task.et; 
        } 
    } 
 
    public static void printSchedule(List<T> tasks, List<V> vms) { 
        double totalWt = 0; 
        int vmCount = vms.size(); 
        int taskCount = tasks.size(); 
 
        System.out.printf("%-10s%-10s%-15s%-10s\n", "Task", "ET", "Waiting 
Time", "VM"); 
        System.out.println("---------------------------------------------------"); 
 
        for (int i = 0; i < taskCount; i++) { 
            System.out.printf("%-10s%-10.2f%-15.2f%-10s\n", 
                    tasks.get(i).n, 
                    tasks.get(i).et, 
                    tasks.get(i).wt, 
                    vms.get(i % vmCount).n); 
        } 
 
        for (int i = Math.max(0, taskCount - vmCount); i < taskCount; i++) { 
NAME:KRISHNA KOUSHIK                                                                                                 REG NO:22MIC0157 
            totalWt += tasks.get(i).wt; 
        } 
 
        System.out.println("\nTotal Waiting Time (last " + Math.min(vmCount, 
taskCount) + " tasks): " + totalWt); 
        System.out.println("Average Waiting Time: " + (vmCount > 0 ? totalWt / 
Math.min(vmCount, taskCount) : 0)); 
    } 
 
    public static void main(String[] args) { 
        Scanner sc = new Scanner(System.in); 
 
        System.out.print("Enter the number of tasks: "); 
        int tCount = sc.nextInt(); 
 
        List<T> tasks = new ArrayList<>(); 
 
        for (int i = 1; i <= tCount; i++) { 
            System.out.print("Enter the execution time for Task " + i + ": "); 
            double et = sc.nextDouble(); 
            tasks.add(new T("T" + i, et)); 
        } 
 
        System.out.print("Enter the number of VMs: "); 
        int vmCount = sc.nextInt(); 
 
        List<V> vms = new ArrayList<>(); 
        for (int i = 1; i <= vmCount; i++) { 
            vms.add(new V("VM" + i)); 
        } 
 
        assignTasks(tasks, vms); 
        printSchedule(tasks, vms); 
    } 
}



#sjf
import java.util.Scanner; 
 
class Task { 
    int taskId; 
    float length; 
    float executionTime; 
    int vmId; 
 
    Task(int taskId, float length, float executionTime) { 
        this.taskId = taskId; 
        this.length = length; 
        this.executionTime = executionTime; 
        this.vmId = 0;  
    } 
} 
 
public class Scheduler { 
 
    public static void sortTasksByLength(Task[] tasks) { 
        for (int i = 0; i < tasks.length - 1; i++) { 
            for (int j = 0; j < tasks.length - 1 - i; j++) { 
                if (tasks[j].length > tasks[j + 1].length) { 
                    Task temp = tasks[j]; 
                    tasks[j] = tasks[j + 1]; 
                    tasks[j + 1] = temp; 
                } 
            } 
        } 
    } 
 
    public static void main(String[] args) { 
        Scanner sc = new Scanner(System.in); 
 
        System.out.print("Enter the number of tasks: "); 
        int n = sc.nextInt(); 
        System.out.print("Enter the number of virtual machines (VMs): "); 
        int vmCount = sc.nextInt(); 
 
        Task[] tasks = new Task[n]; 
        float[] vmWaitingTime = new float[vmCount]; 
NAME:KRISHNA KOUSHIK                                                                                                 REG NO:22MIC0157 
        float[] previousExecutionTime = new float[vmCount]; 
 
        for (int i = 0; i < n; i++) { 
            System.out.print("Enter the length of task " + (i + 1) + ": "); 
            float length = sc.nextFloat(); 
            System.out.print("Enter the execution time of task " + (i + 1) + 
": "); 
            float executionTime = sc.nextFloat(); 
            tasks[i] = new Task(i + 1, length, executionTime); 
        } 
 
        sortTasksByLength(tasks); 
 
        System.out.println("\nTask Schedule:"); 
        System.out.printf("TaskID\tVMID\tTask Length\tExecution Time\tWaiting 
Time\n"); 
 
        for (int i = 0; i < n; i++) { 
            int vmId = i % vmCount; 
            tasks[i].vmId = vmId + 1; 
            float waitingTime = (previousExecutionTime[vmId] > 0) ? 
vmWaitingTime[vmId] + previousExecutionTime[vmId] : 0; 
            System.out.printf("%d\t%d\t%.2f\t\t%.2f\t\t%.2f\n", 
tasks[i].taskId, tasks[i].vmId, tasks[i].length, tasks[i].executionTime, 
waitingTime); 
            vmWaitingTime[vmId] += previousExecutionTime[vmId]; 
            previousExecutionTime[vmId] = tasks[i].executionTime; 
        } 
 
        float totalWaitingTime = 0.0f; 
        for (int i = 0; i < vmCount; i++) { 
            totalWaitingTime += vmWaitingTime[i]; 
        } 
 
        float averageWaitingTime = totalWaitingTime / vmCount; 
        System.out.printf("\nTotal Waiting Time: %.2f\n", totalWaitingTime); 
        System.out.printf("Average Waiting Time (per VM): %.2f\n", 
averageWaitingTime); 
 
        System.out.println("\nFinal Waiting Time for each VM:"); 
        for (int i = 0; i < vmCount; i++) { 
            System.out.printf("VM %d: %.2f\n", i + 1, vmWaitingTime[i]); 
        } 
    } 
}


#max-min
import java.util.Arrays; 
import java.util.Comparator; 
import java.util.Scanner; 
 
class Task { 
    int id; 
    double length; 
    double et; 
    double waitingTime = 0; 
 
    public Task(int id, double length, double et) { 
        this.id = id; 
        this.length = length; 
        this.et = et; 
    } 
 
    @Override 
    public String toString() { 
        return "Task t" + id + "    ET: " + String.format("%.2f", et) + 
"    Waiting Time: " + String.format("%.2f", waitingTime); 
    } 
} 
 
public class Scheduler { 
    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
 
        System.out.print("Enter the number of tasks: "); 
        int numTasks = scanner.nextInt(); 
        System.out.print("Enter the number of VMs: "); 
        int numVMs = scanner.nextInt(); 
 
        Task[] tasks = new Task[numTasks]; 
        double[] vmMips = new double[numVMs]; 
        double[] vmCompletionTimes = new double[numVMs]; 
 
        for (int i = 0; i < numTasks; i++) { 
            System.out.print("Enter length for Task " + (i + 1) + ": "); 
            double length = scanner.nextDouble(); 
NAME:KRISHNA KOUSHIK                                                                                                 REG NO:22MIC0157 
            System.out.print("Enter execution time for Task " + (i + 1) + ": 
"); 
            double et = scanner.nextDouble(); 
            tasks[i] = new Task(i + 1, length, et); 
        } 
 
        for (int i = 0; i < numVMs; i++) { 
            System.out.print("Enter MIPS value for VM" + (i + 1) + ": "); 
            vmMips[i] = scanner.nextDouble(); 
        } 
 
        Arrays.sort(tasks, Comparator.comparingDouble(t -> -t.length)); 
 
        Integer[] vmIndices = new Integer[numVMs]; 
        for (int i = 0; i < numVMs; i++) { 
            vmIndices[i] = i; 
        } 
        Arrays.sort(vmIndices, Comparator.comparingDouble(i -> -vmMips[i])); 
 
        String[] vmAssignmentOrder = new String[numVMs]; 
        for (int i = 0; i < numVMs; i++) { 
            vmAssignmentOrder[i] = "VM" + (vmIndices[i] + 1); 
        } 
 
        System.out.println("Max-Min Scheduling:"); 
        double abb = 0; 
        double overallCompletionTime = 0; 
        for (int i = 0; i < tasks.length; i++) { 
            int vmIndex = i % numVMs; 
            Task task = tasks[i]; 
 
            task.waitingTime = vmCompletionTimes[vmIndex]; 
            vmCompletionTimes[vmIndex] += task.et; 
 
            System.out.println("Task t" + task.id + "    ET: " + task.et + 
"    " + vmAssignmentOrder[vmIndex] + 
                    "    Waiting Time: " + task.waitingTime); 
             
            if (i >= numTasks - numVMs) { 
                abb += task.waitingTime; 
            } 
        } 
 
        for (double completionTime : vmCompletionTimes) { 
            if (completionTime > overallCompletionTime) { 
                overallCompletionTime = completionTime; 
            } 
        } 
NAME:KRISHNA KOUSHIK                                                                                                 
REG NO:22MIC0157 
double averageWaitingTime = abb / numVMs; 
System.out.println("Total Waiting Time = " + abb); 
System.out.println("Average Waiting Time = " + averageWaitingTime); 
System.out.println("Overall Completion Time = " + 
overallCompletionTime); 
} 
}


#min-min
import java.util.Scanner; 
class Task { 
int taskId; 
float length; 
float executionTime; 
int vmId; 
Task(int taskId, float length, float executionTime) { 
this.taskId = taskId; 
this.length = length; 
this.executionTime = executionTime; 
this.vmId = 0;  
} 
} 
public class Scheduler { 
NAME:KRISHNA KOUSHIK                                                                                                 REG NO:22MIC0157 
 
    public static void sortTasksByLength(Task[] tasks) { 
        for (int i = 0; i < tasks.length - 1; i++) { 
            for (int j = 0; j < tasks.length - 1 - i; j++) { 
                if (tasks[j].length > tasks[j + 1].length) { 
                    Task temp = tasks[j]; 
                    tasks[j] = tasks[j + 1]; 
                    tasks[j + 1] = temp; 
                } 
            } 
        } 
    } 
 
    public static void main(String[] args) { 
        Scanner sc = new Scanner(System.in); 
 
        System.out.print("Enter the number of tasks: "); 
        int n = sc.nextInt(); 
        System.out.print("Enter the number of virtual machines (VMs): "); 
        int vmCount = sc.nextInt(); 
 
        Task[] tasks = new Task[n]; 
        float[] vmWaitingTime = new float[vmCount]; 
        float[] previousExecutionTime = new float[vmCount]; 
 
        for (int i = 0; i < n; i++) { 
            System.out.print("Enter the length of task " + (i + 1) + ": "); 
            float length = sc.nextFloat(); 
            System.out.print("Enter the execution time of task " + (i + 1) + 
": "); 
            float executionTime = sc.nextFloat(); 
            tasks[i] = new Task(i + 1, length, executionTime); 
        } 
 
        sortTasksByLength(tasks); 
 
        System.out.println("\nTask Schedule:"); 
        System.out.printf("TaskID\tVMID\tTask Length\tExecution Time\tWaiting 
Time\n"); 
 
        for (int i = 0; i < n; i++) { 
            int vmId = i % vmCount; 
            tasks[i].vmId = vmId + 1; 
            float waitingTime = (previousExecutionTime[vmId] > 0) ? 
vmWaitingTime[vmId] + previousExecutionTime[vmId] : 0; 
            System.out.printf("%d\t%d\t%.2f\t\t%.2f\t\t%.2f\n", 
tasks[i].taskId, tasks[i].vmId, tasks[i].length, tasks[i].executionTime, 
waitingTime); 
NAME:KRISHNA KOUSHIK                                                                                                 
REG NO:22MIC0157 
vmWaitingTime[vmId] += previousExecutionTime[vmId]; 
previousExecutionTime[vmId] = tasks[i].executionTime; 
} 
float totalWaitingTime = 0.0f; 
for (int i = 0; i < vmCount; i++) { 
totalWaitingTime += vmWaitingTime[i]; 
} 
float averageWaitingTime = totalWaitingTime / vmCount; 
System.out.printf("\nTotal Waiting Time: %.2f\n", totalWaitingTime); 
System.out.printf("Average Waiting Time (per VM): %.2f\n", 
averageWaitingTime); 
System.out.println("\nFinal Waiting Time for each VM:"); 
for (int i = 0; i < vmCount; i++) { 
System.out.printf("VM %d: %.2f\n", i + 1, vmWaitingTime[i]); 
} 
} 
}
